criar e rodar container no docker (docker run <nome_imagem>)
> docker run docker/whalesay cowsay Hello_World
> docker run ubuntu

deixar o container aberto no terminal
> docker run -it ubuntu

sair do container
> exit 
ou
> ctrl+c + ctrl+c

ver os containers rodando atualmente
> docker ps
ou
> docker container ls

historico de todos os containers que ja rodaram na maquina
> docker ps -a
ou
> docker container ls -a

executar o container com iteracao (flag -it)
> docker run -it node

parar determinado container
> docker stop <nome_container ou id>

executar container em background(flag -d) - liberar o terminal
> docker run -d nginx

expor portas dos containers (flag -p)
> docker run -d -p 80:80 nginx
> docker run -d -p <porta da minha maquina>:<porta do container> nginx 

retornar a rodar um container stopado com todas as configuracoes feitas anteriormente (docker start <id>)
> docker start 3abe1026c885

definir um nome para container (flag --name)
>docker run -d -p 80:80 --name nginx_app nginx

verificar os logs do container (docker logs <id>)
> docker logs nginx_app
> docker logs -f nginx_app

remover container (docker rm <nome ou id>)
> docker rm cool_booth
Se estiver rodando:
> docker rm cool_booth -f 

rodar um dockerfile (arquivo de imagem)
> docker run -d -p 80:80 --name meu_apache httpd

Executar uma imagem criada
 - fazer o build:
   > docker build <diretorio_imagem>
 - assim, entrar no diretorio e fazer:
   > docker build .
 
 - executar
   > docker run <imagem>

listar todas as imagens 
> docker image ls 
ou
>docker images 

download de imagens
> docker pull <imagem>

help
> docker run --help
> docker images --help

renomear o nome da imagem
> docker tag <nome>

inserir a tag
> docker tag <id> <nome>:<tag>

nomear imagem ja na criacao (flag -t)
> docker build -t meunode_diferente .
> docker build -t meunode_diferente:minhatag_diferente .

docker start iterativo
> docker start -i <nome_imagem>

remover imagens
> docker rmi <imagem>
ou, para forçar a remoção...
> docker rmi -f <imagem>

remover imagens e containers e networks
> docker system prune

remover container apos utilizar (flag --rm)
> docker run --rm <container>
> docker run -d -p 3000:3000 --name node_diferente --rm meu_node_diferente

copiar arquivos entre containers (entre diretorio e container ou de um container para diretorio)
. docker cp
> docker cp node_diferente2:/app/app.js .\copia\

verificar informacoes de processamento
> docker top <container>

verificar dados do container
> dock isnpect <container>

verificar os processos que estao rodando no container
> docker stats

############### DOCKER HUB ###################
autenticacao no docker hub
> docker login

lougout
> docker logout

enviar imagem para o docker hub (PUSH)
 - fazer o build
   > docker build -t theosribeiro92/nodeteste .
 - enviar para o docker hub
   > docker push theosribeiro92/nodeteste

capturar imagem do docker hub (PULL)
> docker pull theosribeiro92/nodeteste

inserir tag
> docker build -t theosribeiro92/nodeteste:novaversao .
> docker push theosribeiro92/nodeteste:novaversao

######### VOLUMES #########

salvar dados no volume anonimo
> docker run -v /data
> docker run -d -p 80:80 --name phpmessages_container --rm -v /data phpmessages 

visualizar volumes
> docker volume ls

volumes nomeados
> docker run -v nodeVolume:/data
> docker run -d -p 80:80 --name phpmessages_container -v phpvolume:/var/www/html/messages --rm phpmessages

volume bind mounts, aponta para diretorio host
> docker run /dir/data:/data
> docker run -d -p 80:80 --name phpmessages_container -v D:\Documentos\cursos\docker\2_volumes\messages:/var/www/html/messages --rm phpmessages

Bind mount - atualizar projeto
> docker run -d -p 80:80 --name phpmessages_container -v D:\Documentos\cursos\docker\2_volumes\:/var/www/html/messages --rm phpmessages

Criar um volume
> docker volume create <nome>

checar um volume
> docker volume inspect <nome>

remover um volume
> docker volume rm <nome>

remover volumes nao utilizados
> docker volume prune

volume apenas de leitura
> docker run -v volume:/data:ro
> docker run -d -p 80:80 --name phpmessages_container -v volumeleitura:/var/www/html:ro --rm phpmessages


######### NETWORKS #########

lISTAR REDES
> docker network ls

CRIAR REDE padrao(bridge)
> docker network create <nome>

CRIAR REDE macvlan
> docker network create -d macvlan meumacvlan

REMOVER REDE
> docker network rm <nome>

REMOVER REDES EM MASSA - nao utiizadas
> docker network prune

BUILD REDE
> docker build -t flaskexterna .

iniciar o container
> docker run -d -p 5000:5000 --name flaskexternacontainer flaskexterna

Conexao entre containers

criar mysql e fazer o build (na pasta mysql)
> docker build -t mysqlapinetwork .

criar o network flask
> docker network create flasknetwork

rodar o container mysql
> docker run -d -p 3306:3306 --name mysql_api_container --rm --network flasknetwork -e MYSQL_ALLOW_EMPTY_PASSWORD=False mysqlapinetwork

na pasta flask:
build da flaskapinetwork
> docker build -t flaskapinetwork .

rodar o container do flask:
> docker run -d -p 5000:5000 --name flask_api_container --rm --network flasknetwork flaskapinetwork


conectar um container a uma rede manualmente
> docker network connect <nome_rede> <container_id>

desconectar um container a uma rede manualmente
> docker network disconnect <rede> <container>

inspecionar redes
> docker network inspect <nome>


######### YAML #########

instalar yaml no python
> pip3 install pyyaml


######### DOCKER COMPOSE #########

rodar o compose
> docker_compose up

rodar compose em modo detached (flag -d)
> docker_compose up -d

parar compose
> docker compose down

Criar mysql e flask
build mysql e build flask
> docker build -t mysqlcompose .
> docker build -t flaskcompose .

verificar o que tem no compose
>docker-compose ps


######### DOCKER AWS #########

apos baixar a chave e acessa-la, atualizar os pacotes:
> sudo yum update -y

instalar docker:
> sudo yum install docker

inicializar o docker
> sudo service docker start

visualizar os containers
> sudo docker ps

dar permissoes ao usuario ec2-user
> sudo usermod -a -G docker ec2-user

mostrar informacoes do docker
> sudo docker info

inicializar o swarm
> sudo docker swarm init

sair do swarm
> sudo docker swarm leave -f

visualizar os nos(maquinas conectadas) do docker swarm
> docker node ls

adicionar novos nodes
> sudo docker swarm join --token <token> <ip>:<porta>
>sudo docker swarm join --token SWMTKN-1-5buy7kdjyir272jems6q1f1fw5bl5oh0cocvl4vn24iuc9ev12-41cb5tfzjynyc85amalii1zai 172.31.1.98:2377

SUBINDO SERVICO DO SWARM

iniciar o docker com advertencia e ip do NODE LIDER
> docker swarm init --advertise-addr 18.228.24.132

subir novo servico
> docker service create --name <nome> <imagem>
> docker service create --name nginxswarm -p 80:80 nginx

listar servicos(projetos rodando) docker que estao rodando
> docker service ls

remover servicos
> docker service rm <nome>

replicando servico - aumentando o numero de replicas
> docker service create --name <nome> --replicas <numero> <imagem>
> docker service create --name nginxreplicas --replicas 3 -p 80:80 nginx

verificar os dados no Node Worker
> docker container ls

remover container de um Node Worker
> sudo docker container rm <nome> -f

checkar token swarm join
> docker swarm join-token manager

checar swarm
> docker info

remover instancia do swarm
> docker swarm leave -f

removendo um node
> docker node rm <id>

reiniciar o node se cair
- na pasta ~/.ssh/ fazer fazer um ping no servidor
> vim ~/.ssh/config
  - ServerAliveInterval 50

inspecionar servicos
> docker service inspect <id>

verificar containers ativados pelo service
> docker service ps <id>

COMPOSE COM SWARM
> docker stack deploy -c <arquivo.yaml> <nome>
> sudo docker stack deploy -c docker-compose.yaml nginx_swarm

adicionar replicas do stack
> docker service scale <nome>=<replicas>
> sudo docker service scale nginx_swarm_web=3

verificar nodes ativos:
>docker service ls

fazer o servico nao receber mais tasks
> docker node update --availability drain <id>
> sudo docker node update --availability drain 2man1slysji5tcctjm9krkpn2

fazer o servico voltar a receber mais tasks
> docker node update --availability active <id>

atualizar parametro dos nodes
> docker service update --image <imagem><servico>
> docker service update --image nginx:1.18.0 pqtrfo7xic6d

REDE PARA SWARM

criar rede
> docker network create
> docker network create --driver overlay swarm

visualizar redes
> docker network ls

criar service
> docker service create --name nginxreplicas --replicas 3 -p 8000:8000 --network swarm nginx

verificar os servicos em pe
> docker service ls

ver os conntainer rodando
> docker container ls

verificar o status do container
> docker container inspect <id>

conectar um servico rodando a uma rede especifica 
> docker service update --network <rede><id_service>

checar o resultado com inspect
> docker container inspect <id>