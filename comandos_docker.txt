criar e rodar container no docker (docker run <nome_imagem>)
> docker run docker/whalesay cowsay Hello_World
> docker run ubuntu

deixar o container aberto no terminal
> docker run -it ubuntu

sair do container
> exit 
ou
> ctrl+c + ctrl+c

ver os containers rodando atualmente
> docker ps
ou
> docker container ls

historico de todos os containers que ja rodaram na maquina
> docker ps -a
ou
> docker container ls -a

executar o container com iteracao (flag -it)
> docker run -it node

parar determinado container
> docker stop <nome_container ou id>

executar container em background(flag -d) - liberar o terminal
> docker run -d nginx

expor portas dos containers (flag -p)
> docker run -d -p 80:80 nginx
> docker run -d -p <porta da minha maquina>:<porta do container> nginx 

retornar a rodar um container stopado com todas as configuracoes feitas anteriormente (docker start <id>)
> docker start 3abe1026c885

definir um nome para container (flag --name)
>docker run -d -p 80:80 --name nginx_app nginx

verificar os logs do container (docker logs <id>)
> docker logs nginx_app
> docker logs -f nginx_app

remover container (docker rm <nome ou id>)
> docker rm cool_booth
Se estiver rodando:
> docker rm cool_booth -f 

rodar um dockerfile (arquivo de imagem)
> docker run -d -p 80:80 --name meu_apache httpd

Executar uma imagem criada
 - fazer o build:
   > docker build <diretorio_imagem>
 - assim, entrar no diretorio e fazer:
   > docker build .
 
 - executar
   > docker run <imagem>

listar todas as imagens 
> docker image ls 
ou
>docker images 

download de imagens
> docker pull <imagem>

help
> docker run --help
> docker images --help

renomear o nome da imagem
> docker tag <nome>

inserir a tag
> docker tag <id> <nome>:<tag>

nomear imagem ja na criacao (flag -t)
> docker build -t meunode_diferente .
> docker build -t meunode_diferente:minhatag_diferente .

docker start iterativo
> docker start -i <nome_imagem>

remover imagens
> docker rmi <imagem>
ou, para forçar a remoção...
> docker rmi -f <imagem>

remover imagens e containers e networks
> docker system prune

remover container apos utilizar (flag --rm)
> docker run --rm <container>
> docker run -d -p 3000:3000 --name node_diferente --rm meu_node_diferente

copiar arquivos entre containers (entre diretorio e container ou de um container para diretorio)
. docker cp
> docker cp node_diferente2:/app/app.js .\copia\

verificar informacoes de processamento
> docker top <container>

verificar dados do container
> dock isnpect <container>

verificar os processos que estao rodando no container
> docker stats

############### DOCKER HUB ###################
autenticacao no docker hub
> docker login

lougout
> docker logout

enviar imagem para o docker hub (PUSH)
 - fazer o build
   > docker build -t theosribeiro92/nodeteste .
 - enviar para o docker hub
   > docker push theosribeiro92/nodeteste

capturar imagem do docker hub (PULL)
> docker pull theosribeiro92/nodeteste

inserir tag
> docker build -t theosribeiro92/nodeteste:novaversao .
> docker push theosribeiro92/nodeteste:novaversao

######### VOLUMES ANONIMOS #########

salvar dados no volume anonimo
> docker run -v /data
> docker run -d -p 80:80 --name phpmessages_container --rm -v /data phpmessages 

visualizar volumes
> docker volume ls

volumes nomeados
> docker run -v nodeVolume:/data
> docker run -d -p 80:80 --name phpmessages_container -v phpvolume:/var/www/html/messages --rm phpmessages

volume blind mounts, aponta para diretorio host
> docker run /dir/data:/data
> docker run -d -p 80:80 --name phpmessages_container -v D:\Documentos\cursos\docker\2_volumes\messages:/var/www/html/messages --rm phpmessages